<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql Server Extensibility Framework on Niels Berglund</title>
    <link>/categories/sql-server-extensibility-framework/</link>
    <description>Recent content in Sql Server Extensibility Framework on Niels Berglund</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 09 Jan 2021 11:38:09 +0200</lastBuildDate>
    
	<atom:link href="/categories/sql-server-extensibility-framework/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Solve Python Issues in SQL Server Machine Learning Services After Deploying Python 3.9</title>
      <link>/2021/01/09/solve-python-issues-in-sql-server-machine-learning-services-after-deploying-python-3.9/</link>
      <pubDate>Sat, 09 Jan 2021 11:38:09 +0200</pubDate>
      
      <guid>/2021/01/09/solve-python-issues-in-sql-server-machine-learning-services-after-deploying-python-3.9/</guid>
      <description>&lt;p&gt;In September 2020, Microsoft open-sourced SQL Server Machine Learning Services, (SQLMLS), language extensions for R and Python. If you want more information, here are some blog posts I have written about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/2020/12/29/updated-bring-your-own-r--python-runtimes-to-sql-server-extensibility-framework/&#34;&gt;&lt;strong&gt;Bring Your Own R &amp;amp; Python Runtimes to SQL Server Extensibility Framework&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/2021/01/05/updated-write-a-python-3.9-language-extension-for-sql-server-machine-learning-services/&#34;&gt;&lt;strong&gt;Write a Python 3.9 Language Extension for SQL Server Machine Learning Services&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;a href=&#34;/2021/01/05/updated-write-a-python-3.9-language-extension-for-sql-server-machine-learning-services/&#34;&gt;last post&lt;/a&gt;, which looks at using Python 3.9 in SQL Server Machine Learning Services, I wrote this at the very end:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It looks like all is good, but maybe not? In a future post we&amp;rsquo;ll look at an issue we have introduced - but for now, let us bask in the glory of having created a new Python language extension.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the post, we wrote a new language extension to handle Python 3.9, and that just worked fine. However, when I was doing some other things, I noticed some side effects, and in this post, we look at those side effects and how to solve them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The two posts mentioned above has been updated as a result of this post. If you now follow the posts above you may not see the errors we discuss here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UPDATED: Write a Python 3.9 Language Extension for SQL Server Machine Learning Services</title>
      <link>/2021/01/05/updated-write-a-python-3.9-language-extension-for-sql-server-machine-learning-services/</link>
      <pubDate>Tue, 05 Jan 2021 04:57:43 +0200</pubDate>
      
      <guid>/2021/01/05/updated-write-a-python-3.9-language-extension-for-sql-server-machine-learning-services/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This post has been updated after it was originally published. I have edited information about the &lt;code&gt;PYTHONHOME&lt;/code&gt; system variable, as well as &lt;code&gt;PATH&lt;/code&gt; requirements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my post, &lt;a href=&#34;/2020/12/29/updated-bring-your-own-r--python-runtimes-to-sql-server-extensibility-framework/&#34;&gt;&lt;strong&gt;Bring Your Own R &amp;amp; Python Runtimes to SQL Server Extensibility Framework&lt;/strong&gt;&lt;/a&gt; I wrote about how we can use other R and Python runtimes in SQL Server Machine Learning Services than the ones that come &amp;ldquo;out of the box&amp;rdquo;. In the post, I wrote that if you want to bring a Python runtime other than version 3.7.x, (like 3.8, 3.9, etc.), you need to build your own Python language extension, and we&amp;rsquo;d look at it in a future post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For R and Java the existing language extension can be used regardless of R/Java version, (at least as far as I know).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I wrote we&amp;rsquo;d look at it in a future post I thought to myself; &amp;ldquo;how hard can it be?&amp;rdquo;. I had read the steps of how to build a Python language extension for Windows &lt;a href=&#34;https://github.com/microsoft/sql-server-language-extensions/tree/master/language-extensions/python&#34;&gt;here&lt;/a&gt;, and it didn&amp;rsquo;t seem that hard: some Boost, CMake, compile, and Bob&amp;rsquo;s your uncle! Well, it turned out it was somewhat more complicated than what I anticipated. So, if you are interested - read on!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Build Boost.Python &amp; Numpy in Windows</title>
      <link>/2021/01/03/build-boost.python--numpy-in-windows/</link>
      <pubDate>Sun, 03 Jan 2021 13:50:55 +0200</pubDate>
      
      <guid>/2021/01/03/build-boost.python--numpy-in-windows/</guid>
      <description>&lt;p&gt;In this post, we look at how to build &lt;code&gt;Boost.Python&lt;/code&gt; and &lt;code&gt;Numpy&lt;/code&gt;. We look at it from a perspective where we want to use what we build as part of a bridge between SQL Server 2019 and Python. However, if you are not interested in SQL, the post should still give you some - hopefully - useful information.&lt;/p&gt;

&lt;p&gt;Please note that I am a SQL dude, and my knowledge of Boost, Python and Numpy is limited at best. So take this post for what it is; the steps I took to successfully build &lt;code&gt;Boost.Python&lt;/code&gt; and &lt;code&gt;Numpy&lt;/code&gt; on a Windows box.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UPDATED: Bring Your Own R &amp; Python Runtimes to SQL Server Extensibility Framework</title>
      <link>/2020/12/29/updated-bring-your-own-r--python-runtimes-to-sql-server-extensibility-framework/</link>
      <pubDate>Tue, 29 Dec 2020 12:47:45 +0200</pubDate>
      
      <guid>/2020/12/29/updated-bring-your-own-r--python-runtimes-to-sql-server-extensibility-framework/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This post has been updated after it was originally published. I have edited information about the &lt;code&gt;PYTHONHOME&lt;/code&gt; system variable, as well as &lt;code&gt;PATH&lt;/code&gt; requirements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back in the day I wrote quite a few blog posts about &lt;a href=&#34;https://nielsberglund.com/categories/sql-server-machine-learning-services/&#34;&gt;&lt;strong&gt;SQL Server Machine Learning Services&lt;/strong&gt;&lt;/a&gt; as well as &lt;a href=&#34;https://nielsberglund.com/categories/sql-server-extensibility-framework/&#34;&gt;&lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://nielsberglund.com/categories/sql-server-extensibility-framework/&#34;&gt;&lt;strong&gt;External Languages&lt;/strong&gt;&lt;/a&gt;. &lt;strong&gt;SQL Server Machine Learning Services&lt;/strong&gt; is very cool, but a complaint has been that you are restricted in what versions of R and Python you use.&lt;/p&gt;

&lt;p&gt;In September 2020, Microsoft &lt;a href=&#34;https://cloudblogs.microsoft.com/sqlserver/2020/09/24/open-sourcing-the-r-and-python-language-extensions-for-sql-server/&#34;&gt;announced&lt;/a&gt; that they have open-sourced the technology behind SQL Server Extensibility Framework. As a result, we can now bring our own versions of R and Python to SQL Server 2019.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To bring your own R/Python you need SQL Server 2019 CU3 or above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this blog post, we look at how to do that.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 &amp; Java: Parameters</title>
      <link>/2019/11/03/sql-server-2019--java-parameters/</link>
      <pubDate>Sun, 03 Nov 2019 11:07:23 +0200</pubDate>
      
      <guid>/2019/11/03/sql-server-2019--java-parameters/</guid>
      <description>&lt;p&gt;Microsoft introduced the ability to call Java code from SQL Server in around the SQL Server 2019 CTP 2.0 release, and I have written some posts posts about this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughout the CTP releases some functionality has changed, and in CTP 2.5 Microsoft introduced the Java Language Extension SDK. The Java code we write needs now to include the Java SDK and extend an abstract base from the SDK.&lt;/p&gt;

&lt;p&gt;With the introduction of the Java Language SDK, came some changes to how you handle method parameters, and I touched upon it briefly in the &lt;a href=&#34;/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/&#34;&gt;&lt;strong&gt;Java &amp;amp; SQL Server 2019 Extensibility Framework: The Sequel&lt;/strong&gt;&lt;/a&gt; post. In this post, I want to look more in detail at parameters and how to handle them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 &amp; Java Null Handling: Take Two</title>
      <link>/2019/10/26/sql-server-2019--java-null-handling-take-two/</link>
      <pubDate>Sat, 26 Oct 2019 05:32:54 +0200</pubDate>
      
      <guid>/2019/10/26/sql-server-2019--java-null-handling-take-two/</guid>
      <description>&lt;p&gt;You who read my blog know that during the last year, (or so), I have been writing about SQL Server 2019 and the ability to call into Java code from SQL Server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has been a fascinating &amp;ldquo;journey&amp;rdquo;, since SQL Server 2019 is still in preview, and there have been changes in how you call Java code along the way. In this post, we look at some relatively recent changes to how we handle null values in datasets.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 CTP3.2 &amp; Java</title>
      <link>/2019/08/03/sql-server-2019-ctp3.2--java/</link>
      <pubDate>Sat, 03 Aug 2019 06:55:33 +0200</pubDate>
      
      <guid>/2019/08/03/sql-server-2019-ctp3.2--java/</guid>
      <description>&lt;p&gt;It seems that for each new SQL Server 2019 CTP release, there are changes to the Java extensions, and CTP 3.2 is no exception. Well, that is not exactly true as in CTP 3.2 release the changes are not about the extension and how we write code, but Java itself.&lt;/p&gt;

&lt;p&gt;One of the &lt;a href=&#34;https://cloudblogs.microsoft.com/sqlserver/2019/07/24/free-supported-java-in-sql-server-2019-is-now-available/&#34;&gt;announcements&lt;/a&gt; of what is new in CTP 3.2 was that SQL Server now includes &lt;a href=&#34;https://www.azul.com/&#34;&gt;Azul System&amp;rsquo;s&lt;/a&gt; Zulu Embedded right out of the box for all scenarios where we use Java in SQL Server, including Java extensibility.&lt;/p&gt;

&lt;p&gt;So, in this post, we look at the impact, (if any), this has to how we use the Java extensibility framework in SQL Server 2019.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Set Your SQL Server Data Free with Kafka: Extensibility Framework</title>
      <link>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</link>
      <pubDate>Tue, 16 Jul 2019 05:10:24 +0200</pubDate>
      
      <guid>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</guid>
      <description>&lt;p&gt;As many of you may know, (or not), is that my background is SQL Server. Ever since I started programming, SQL Server has been my &amp;ldquo;trusty companion&amp;rdquo;, and my belief is that if you don&amp;rsquo;t have SQL Server as a backend, then there is something wrong. At work, (&lt;a href=&#34;/derivco&#34;&gt;Derivco&lt;/a&gt;), it is the same thing, and we are jokingly saying that we do not have business logic in the database, we have full-blown applications!&lt;/p&gt;

&lt;p&gt;However, both me personally and at work, we do realise the value of streaming data; for real-time processing as well as to distribute data without having to rely on replication. In the ideal world, we would change the applications/systems that are the source of the data to both publish the data as event streams as well as persisting the data to the database. However, it may not be possible to change those applications/systems - at least not in the time frame we would like. So what we want to do is to use the database as the source of the data, but treat the data, not as rows in a database but, as streaming events.&lt;/p&gt;

&lt;p&gt;This is the first post in a &amp;ldquo;mini&amp;rdquo; series where we look at how we can do what is outlined above. In this post, we look at how to use the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt;, and more specifically the Java language extension to solve the issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; External Languages</title>
      <link>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</link>
      <pubDate>Thu, 06 Jun 2019 05:37:52 +0200</pubDate>
      
      <guid>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</guid>
      <description>&lt;p&gt;A little while ago I wrote a blog post, &lt;a href=&#34;/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/&#34;&gt;&lt;strong&gt;Java &amp;amp; SQL Server 2019 Extensibility Framework: The Sequel&lt;/strong&gt;&lt;/a&gt;, about changes in SQL Server 2019 CTP 2.5 impacting how we write Java code for use from SQL Server. While I wrote that post, Microsoft released SQL Server 2019 CTP 3.0, and, (surprise, surprise), that release contains more changes affecting Java code in SQL Server.&lt;/p&gt;

&lt;p&gt;This post covers those changes as well as discusses what SQL Server Extensibility Framework and Language Extensions are.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java &amp; SQL Server 2019 Extensibility Framework: The Sequel</title>
      <link>/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/</link>
      <pubDate>Sun, 26 May 2019 07:20:09 +0200</pubDate>
      
      <guid>/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/</guid>
      <description>&lt;p&gt;As you may know, a while back I wrote some posts about the support for Java in SQL Server 2019: &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;. The posts covered in some detail how Java in SQL Server worked, and how to write Java code for use in SQL Server. However, a week or two ago &amp;ldquo;the sky came tumbling down&amp;rdquo; when Microsoft released SQL Server 2019 CTP 2.5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; CTP stands for Community Technology Preview and is like a beta release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What Microsoft did in CTP 2.5 was to introduce Java Language Extension SDK, and your Java code now needs to inherit an abstract base class from the SDK. This requirement makes a large part of my previous posts &amp;ldquo;null and void&amp;rdquo;, so in this post, we look at what to do going forward.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>