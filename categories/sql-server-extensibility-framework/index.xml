<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql Server Extensibility Framework on Niels Berglund</title>
    <link>/categories/sql-server-extensibility-framework/</link>
    <description>Recent content in Sql Server Extensibility Framework on Niels Berglund</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 26 Oct 2019 05:32:54 +0200</lastBuildDate>
    
	<atom:link href="/categories/sql-server-extensibility-framework/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL Server 2019 &amp; Java Null Handling: Take Two</title>
      <link>/2019/10/26/sql-server-2019--java-null-handling-take-two/</link>
      <pubDate>Sat, 26 Oct 2019 05:32:54 +0200</pubDate>
      
      <guid>/2019/10/26/sql-server-2019--java-null-handling-take-two/</guid>
      <description>&lt;p&gt;You who read my blog know that during the last year, (or so), I have been writing about SQL Server 2019 and the ability to call into Java code from SQL Server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has been a fascinating &amp;ldquo;journey&amp;rdquo;, since SQL Server 2019 is still in preview, and there have been changes in how you call Java code along the way. In this post, we look at some relatively recent changes to how we handle null values in datasets.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 CTP3.2 &amp; Java</title>
      <link>/2019/08/03/sql-server-2019-ctp3.2--java/</link>
      <pubDate>Sat, 03 Aug 2019 06:55:33 +0200</pubDate>
      
      <guid>/2019/08/03/sql-server-2019-ctp3.2--java/</guid>
      <description>&lt;p&gt;It seems that for each new SQL Server 2019 CTP release, there are changes to the Java extensions, and CTP 3.2 is no exception. Well, that is not exactly true as in CTP 3.2 release the changes are not about the extension and how we write code, but Java itself.&lt;/p&gt;

&lt;p&gt;One of the &lt;a href=&#34;https://cloudblogs.microsoft.com/sqlserver/2019/07/24/free-supported-java-in-sql-server-2019-is-now-available/&#34;&gt;announcements&lt;/a&gt; of what is new in CTP 3.2 was that SQL Server now includes &lt;a href=&#34;https://www.azul.com/&#34;&gt;Azul System&amp;rsquo;s&lt;/a&gt; Zulu Embedded right out of the box for all scenarios where we use Java in SQL Server, including Java extensibility.&lt;/p&gt;

&lt;p&gt;So, in this post, we look at the impact, (if any), this has to how we use the Java extensibility framework in SQL Server 2019.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Set Your SQL Server Data Free with Kafka: Extensibility Framework</title>
      <link>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</link>
      <pubDate>Tue, 16 Jul 2019 05:10:24 +0200</pubDate>
      
      <guid>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</guid>
      <description>&lt;p&gt;As many of you may know, (or not), is that my background is SQL Server. Ever since I started programming, SQL Server has been my &amp;ldquo;trusty companion&amp;rdquo;, and my belief is that if you don&amp;rsquo;t have SQL Server as a backend, then there is something wrong. At work, (&lt;a href=&#34;/derivco&#34;&gt;Derivco&lt;/a&gt;), it is the same thing, and we are jokingly saying that we do not have business logic in the database, we have full-blown applications!&lt;/p&gt;

&lt;p&gt;However, both me personally and at work, we do realise the value of streaming data; for real-time processing as well as to distribute data without having to rely on replication. In the ideal world, we would change the applications/systems that are the source of the data to both publish the data as event streams as well as persisting the data to the database. However, it may not be possible to change those applications/systems - at least not in the time frame we would like. So what we want to do is to use the database as the source of the data, but treat the data, not as rows in a database but, as streaming events.&lt;/p&gt;

&lt;p&gt;This is the first post in a &amp;ldquo;mini&amp;rdquo; series where we look at how we can do what is outlined above. In this post, we look at how to use the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt;, and more specifically the Java language extension to solve the issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; External Languages</title>
      <link>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</link>
      <pubDate>Thu, 06 Jun 2019 05:37:52 +0200</pubDate>
      
      <guid>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</guid>
      <description>&lt;p&gt;A little while ago I wrote a blog post, &lt;a href=&#34;/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/&#34;&gt;&lt;strong&gt;Java &amp;amp; SQL Server 2019 Extensibility Framework: The Sequel&lt;/strong&gt;&lt;/a&gt;, about changes in SQL Server 2019 CTP 2.5 impacting how we write Java code for use from SQL Server. While I wrote that post, Microsoft released SQL Server 2019 CTP 3.0, and, (surprise, surprise), that release contains more changes affecting Java code in SQL Server.&lt;/p&gt;

&lt;p&gt;This post covers those changes as well as discusses what SQL Server Extensibility Framework and Language Extensions are.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java &amp; SQL Server 2019 Extensibility Framework: The Sequel</title>
      <link>/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/</link>
      <pubDate>Sun, 26 May 2019 07:20:09 +0200</pubDate>
      
      <guid>/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/</guid>
      <description>&lt;p&gt;As you may know, a while back I wrote some posts about the support for Java in SQL Server 2019: &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;. The posts covered in some detail how Java in SQL Server worked, and how to write Java code for use in SQL Server. However, a week or two ago &amp;ldquo;the sky came tumbling down&amp;rdquo; when Microsoft released SQL Server 2019 CTP 2.5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; CTP stands for Community Technology Preview and is like a beta release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What Microsoft did in CTP 2.5 was to introduce Java Language Extension SDK, and your Java code now needs to inherit an abstract base class from the SDK. This requirement makes a large part of my previous posts &amp;ldquo;null and void&amp;rdquo;, so in this post, we look at what to do going forward.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019, Java &amp; External Libraries - II</title>
      <link>/2019/03/17/sql-server-2019-java--external-libraries---ii/</link>
      <pubDate>Sun, 17 Mar 2019 17:13:45 +0200</pubDate>
      
      <guid>/2019/03/17/sql-server-2019-java--external-libraries---ii/</guid>
      <description>&lt;p&gt;This post is part of the &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt; series of posts, and it is the second post discussing SQL Server 2019, Java and the creation and use of external libraries.&lt;/p&gt;

&lt;p&gt;In the previous post about external libraries, we said that they were beneficial as they reduced complexities when deploying code, but there were still some caveats. So, in this post, we look at how to overcome those caveats&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019, Java &amp; External Libraries - I</title>
      <link>/2019/03/10/sql-server-2019-java--external-libraries---i/</link>
      <pubDate>Sun, 10 Mar 2019 10:22:51 +0200</pubDate>
      
      <guid>/2019/03/10/sql-server-2019-java--external-libraries---i/</guid>
      <description>&lt;p&gt;A couple of months ago I wrote a series of posts about one of the new features in SQL Server 2019; the ability to call out to Java code from inside SQL Server.&lt;/p&gt;

&lt;p&gt;To see the posts, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the posts, we discussed how the Java extension differs from R and Python in that R and Python are an integrated part of the SQL Server install (when enabling in-database analytics), but Java is not. In other words, the use of the Java extension requires Java to be installed beforehand, and this then has implications on permissions. We also discussed how Java is a compiled language, and we execute against a method in a class, whereas with R and Python we send a script to the external engine. The consequence of this is that when we execute Java code, we need to indicate where the compiled code resides, and those locations need specific permissions.&lt;/p&gt;

&lt;p&gt;All this creates a level of complexity, and it would potentially be easier if we load the Java code from a well-known place, where we do not need to worry about permissions and so forth.&lt;/p&gt;

&lt;p&gt;This post is the first of a couple where we see how new functionality in SQL Server 2019 CTP 2.3 can help.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 &amp; Java with Visual Studio Code</title>
      <link>/2019/01/17/sql-server-2019--java-with-visual-studio-code/</link>
      <pubDate>Thu, 17 Jan 2019 06:16:42 +0200</pubDate>
      
      <guid>/2019/01/17/sql-server-2019--java-with-visual-studio-code/</guid>
      <description>&lt;p&gt;As you know, SQL Server 2019 introduces the Java language extensions as part of the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt;. The Java language extensions make it possible to execute Java code from inside SQL Server, the same way we can run R/Python code. Seeing that I am &amp;ldquo;somewhat&amp;rdquo; interested in the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt; I wrote some posts about the Java language extensions: &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code in the posts is very, very simplistic where I was just trying to get the ideas across how and what to do. Another reason the code is simplistic is that I am not a Java &amp;ldquo;person&amp;rdquo;; in fact, the only Java code I have ever written is what is in those posts. Me not being a Java &amp;ldquo;person&amp;rdquo; I do not have a Java IDE, (for the code I wrote I did not need one either), so I used my regular text editor &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text 3&lt;/a&gt;, and I compiled the code from command line (&lt;code&gt;$ javac ...&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I then started on a new Java post (which I have not finished yet), and it became clear I needed an IDE, (intelli-sense, debug, etc.), but which IDE?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; Java - Misc. &#39;Stuff&#39;</title>
      <link>/2018/12/30/sql-server-2019-extensibility-framework--java---misc.-stuff/</link>
      <pubDate>Sun, 30 Dec 2018 12:24:53 +0200</pubDate>
      
      <guid>/2018/12/30/sql-server-2019-extensibility-framework--java---misc.-stuff/</guid>
      <description>&lt;p&gt;This post is the fourth post in a series where I look at the Java extension in SQL Server, i.e. the ability to execute Java code from inside SQL Server.&lt;/p&gt;

&lt;p&gt;To see what other posts there are in the series, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This fourth post acts as a &amp;ldquo;roundup&amp;rdquo; of miscellaneous &amp;ldquo;stuff&amp;rdquo; I did not cover in the three previous posts, and some of the things we look at are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java packages.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CLASSPATH&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;li&gt;JAR files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let us get into it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; Java - Null Values</title>
      <link>/2018/12/19/sql-server-2019-extensibility-framework--java---null-values/</link>
      <pubDate>Wed, 19 Dec 2018 17:12:39 +0200</pubDate>
      
      <guid>/2018/12/19/sql-server-2019-extensibility-framework--java---null-values/</guid>
      <description>&lt;p&gt;This post is the third post in a series where I look at the Java extension in SQL Server, i.e. the ability to execute Java code from inside SQL Server.&lt;/p&gt;

&lt;p&gt;To see what other posts there are in the series, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we look at something related to the &lt;a href=&#34;/2018/12/08/sql-server-2019-extensibility-framework--java---passing-data/&#34;&gt;data passing post&lt;/a&gt;; how to handle null values.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>