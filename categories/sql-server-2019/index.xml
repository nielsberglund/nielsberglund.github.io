<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql Server 2019 on Niels Berglund</title>
    <link>/categories/sql-server-2019/</link>
    <description>Recent content in Sql Server 2019 on Niels Berglund</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Thu, 06 Jun 2019 05:37:52 +0200</lastBuildDate>
    
	<atom:link href="/categories/sql-server-2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; External Languages</title>
      <link>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</link>
      <pubDate>Thu, 06 Jun 2019 05:37:52 +0200</pubDate>
      
      <guid>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</guid>
      <description>&lt;p&gt;A little while ago I wrote a blog post, &lt;a href=&#34;/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/&#34;&gt;&lt;strong&gt;Java &amp;amp; SQL Server 2019 Extensibility Framework: The Sequel&lt;/strong&gt;&lt;/a&gt;, about changes in SQL Server 2019 CTP 2.5 impacting how we write Java code for use from SQL Server. While I wrote that post, Microsoft released SQL Server 2019 CTP 3.0, and, (surprise, surprise), that release contains more changes affecting Java code in SQL Server.&lt;/p&gt;

&lt;p&gt;This post covers those changes as well as discusses what SQL Server Extensibility Framework and Language Extensions are.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java &amp; SQL Server 2019 Extensibility Framework: The Sequel</title>
      <link>/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/</link>
      <pubDate>Sun, 26 May 2019 07:20:09 +0200</pubDate>
      
      <guid>/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/</guid>
      <description>&lt;p&gt;As you may know, a while back I wrote some posts about the support for Java in SQL Server 2019: &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;. The posts covered in some detail how Java in SQL Server worked, and how to write Java code for use in SQL Server. However, a week or two ago &amp;ldquo;the sky came tumbling down&amp;rdquo; when Microsoft released SQL Server 2019 CTP 2.5.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; CTP stands for Community Technology Preview and is like a beta release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What Microsoft did in CTP 2.5 was to introduce Java Language Extension SDK, and your Java code now needs to inherit an abstract base class from the SDK. This requirement makes a large part of my previous posts &amp;ldquo;null and void&amp;rdquo;, so in this post, we look at what to do going forward.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019, Java &amp; External Libraries - II</title>
      <link>/2019/03/17/sql-server-2019-java--external-libraries---ii/</link>
      <pubDate>Sun, 17 Mar 2019 17:13:45 +0200</pubDate>
      
      <guid>/2019/03/17/sql-server-2019-java--external-libraries---ii/</guid>
      <description>&lt;p&gt;This post is part of the &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt; series of posts, and it is the second post discussing SQL Server 2019, Java and the creation and use of external libraries.&lt;/p&gt;

&lt;p&gt;In the previous post about external libraries, we said that they were beneficial as they reduced complexities when deploying code, but there were still some caveats. So, in this post, we look at how to overcome those caveats&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019, Java &amp; External Libraries - I</title>
      <link>/2019/03/10/sql-server-2019-java--external-libraries---i/</link>
      <pubDate>Sun, 10 Mar 2019 10:22:51 +0200</pubDate>
      
      <guid>/2019/03/10/sql-server-2019-java--external-libraries---i/</guid>
      <description>&lt;p&gt;A couple of months ago I wrote a series of posts about one of the new features in SQL Server 2019; the ability to call out to Java code from inside SQL Server.&lt;/p&gt;

&lt;p&gt;To see the posts, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the posts, we discussed how the Java extension differs from R and Python in that R and Python are an integrated part of the SQL Server install (when enabling in-database analytics), but Java is not. In other words, the use of the Java extension requires Java to be installed beforehand, and this then has implications on permissions. We also discussed how Java is a compiled language, and we execute against a method in a class, whereas with R and Python we send a script to the external engine. The consequence of this is that when we execute Java code, we need to indicate where the compiled code resides, and those locations need specific permissions.&lt;/p&gt;

&lt;p&gt;All this creates a level of complexity, and it would potentially be easier if we load the Java code from a well-known place, where we do not need to worry about permissions and so forth.&lt;/p&gt;

&lt;p&gt;This post is the first of a couple where we see how new functionality in SQL Server 2019 CTP 2.3 can help.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 &amp; Java with Visual Studio Code</title>
      <link>/2019/01/17/sql-server-2019--java-with-visual-studio-code/</link>
      <pubDate>Thu, 17 Jan 2019 06:16:42 +0200</pubDate>
      
      <guid>/2019/01/17/sql-server-2019--java-with-visual-studio-code/</guid>
      <description>&lt;p&gt;As you know, SQL Server 2019 introduces the Java language extensions as part of the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt;. The Java language extensions make it possible to execute Java code from inside SQL Server, the same way we can run R/Python code. Seeing that I am &amp;ldquo;somewhat&amp;rdquo; interested in the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt; I wrote some posts about the Java language extensions: &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code in the posts is very, very simplistic where I was just trying to get the ideas across how and what to do. Another reason the code is simplistic is that I am not a Java &amp;ldquo;person&amp;rdquo;; in fact, the only Java code I have ever written is what is in those posts. Me not being a Java &amp;ldquo;person&amp;rdquo; I do not have a Java IDE, (for the code I wrote I did not need one either), so I used my regular text editor &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text 3&lt;/a&gt;, and I compiled the code from command line (&lt;code&gt;$ javac ...&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I then started on a new Java post (which I have not finished yet), and it became clear I needed an IDE, (intelli-sense, debug, etc.), but which IDE?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; Java - Misc. &#39;Stuff&#39;</title>
      <link>/2018/12/30/sql-server-2019-extensibility-framework--java---misc.-stuff/</link>
      <pubDate>Sun, 30 Dec 2018 12:24:53 +0200</pubDate>
      
      <guid>/2018/12/30/sql-server-2019-extensibility-framework--java---misc.-stuff/</guid>
      <description>&lt;p&gt;This post is the fourth post in a series where I look at the Java extension in SQL Server, i.e. the ability to execute Java code from inside SQL Server.&lt;/p&gt;

&lt;p&gt;To see what other posts there are in the series, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This fourth post acts as a &amp;ldquo;roundup&amp;rdquo; of miscellaneous &amp;ldquo;stuff&amp;rdquo; I did not cover in the three previous posts, and some of the things we look at are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java packages.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CLASSPATH&lt;/code&gt; environment variable.&lt;/li&gt;
&lt;li&gt;JAR files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let us get into it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; Java - Null Values</title>
      <link>/2018/12/19/sql-server-2019-extensibility-framework--java---null-values/</link>
      <pubDate>Wed, 19 Dec 2018 17:12:39 +0200</pubDate>
      
      <guid>/2018/12/19/sql-server-2019-extensibility-framework--java---null-values/</guid>
      <description>&lt;p&gt;This post is the third post in a series where I look at the Java extension in SQL Server, i.e. the ability to execute Java code from inside SQL Server.&lt;/p&gt;

&lt;p&gt;To see what other posts there are in the series, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we look at something related to the &lt;a href=&#34;/2018/12/08/sql-server-2019-extensibility-framework--java---passing-data/&#34;&gt;data passing post&lt;/a&gt;; how to handle null values.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; Java - Passing Data</title>
      <link>/2018/12/08/sql-server-2019-extensibility-framework--java---passing-data/</link>
      <pubDate>Sat, 08 Dec 2018 19:52:11 +0200</pubDate>
      
      <guid>/2018/12/08/sql-server-2019-extensibility-framework--java---passing-data/</guid>
      <description>&lt;p&gt;This post is the second post in a series about SQL Server 2019 Extensibility Framework and the Java language extensions. In the first post, &lt;a href=&#34;/2018/12/02/sql-server-2019-extensibility-framework--java---hello-world/&#34;&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java - Hello World&lt;/a&gt;, we looked at how to install and enable the Java language extensions, and we also wrote some pretty basic Java code to ensure it all worked.&lt;/p&gt;

&lt;p&gt;To see what other posts there are in the series, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we look at how we can pass data back and forth between SQL Server and Java.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; Java - Hello World</title>
      <link>/2018/12/02/sql-server-2019-extensibility-framework--java---hello-world/</link>
      <pubDate>Sun, 02 Dec 2018 09:36:34 +0200</pubDate>
      
      <guid>/2018/12/02/sql-server-2019-extensibility-framework--java---hello-world/</guid>
      <description>&lt;p&gt;The SQL Server 2016 release introduced the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt; (EF), which gives us the ability to, from inside SQL Server, execute code in an external language runtime environment. SQL Server 2016 supports R as external runtime, and Microsoft added Python to supported runtimes in the SQL Server 2017 release. The important part about the EF is that the runtime is outside of the core database engine, but we call it from inside SQL Server via the stored procedure &lt;code&gt;sp_execute_external_script&lt;/code&gt;. We can push data from SQL Server queries to the external runtime, and consume data, (resultsets, output parameters) from the external runtime back in SQL Server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can read more about the actual implementation of the external runtimes and &lt;code&gt;sp_execute_external_script&lt;/code&gt; in my &lt;a href=&#34;/sql_server_2k16_r_services&#34;&gt;SQL Server R Services Series&lt;/a&gt; posts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SQL Server 2019 Microsoft added the ability to execute custom Java code along the same lines we execute R and Python, and this blog post intends to give an introduction of how to install and enable the Java extension, as well as execute some very basic Java code. In future posts, I drill down how to pass data back and forth between SQL Server and Java.&lt;/p&gt;

&lt;p&gt;To see what other posts there are in the series, go to &lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Big Data Cluster on Azure Kubernetes Service</title>
      <link>/2018/11/10/sql-server-2019-big-data-cluster-on-azure-kubernetes-service/</link>
      <pubDate>Sat, 10 Nov 2018 07:58:09 +0200</pubDate>
      
      <guid>/2018/11/10/sql-server-2019-big-data-cluster-on-azure-kubernetes-service/</guid>
      <description>&lt;p&gt;At the &lt;a href=&#34;https://www.microsoft.com/en-us/ignite/agenda&#34;&gt;&lt;strong&gt;Microsoft Ignite 2018&lt;/strong&gt;&lt;/a&gt; conference back in September Microsoft released &lt;strong&gt;SQL Server 2019&lt;/strong&gt; for public preview, and I wrote two short blog posts about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/2018/09/24/what-is-new-in-sql-server-2019-public-preview/&#34;&gt;What is New in SQL Server 2019 Public Preview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/2018/09/29/sql-server-2019-for-linux-in-docker-on-windows/&#34;&gt;SQL Server 2019 for Linux in Docker on Windows&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What Microsoft also announced was &lt;strong&gt;SQL Server 2019 Big Data Clusters&lt;/strong&gt;, which combines the SQL Server database engine, Spark, and HDFS into a unified data platform! Yes, you read that right: SQL Server, Spark, and Hadoop right out of the box. Seeing that both Spark and Hadoop are mainly Linux based, what makes the Big Data Cluster possible is &lt;strong&gt;SQL Server on Linux&lt;/strong&gt;. When you deploy a &lt;strong&gt;SQL Server 2019 Big Data Cluster&lt;/strong&gt;, you deploy it as containers on &lt;strong&gt;Kubernetes&lt;/strong&gt;, where the Kubernetes cluster can be in the cloud, such as &lt;a href=&#34;https://azure.microsoft.com/en-us/services/kubernetes-service/&#34;&gt;&lt;strong&gt;Azure Kubernetes Service&lt;/strong&gt;&lt;/a&gt;, or on-prem like &lt;a href=&#34;https://www.openshift.com/learn/topics/kubernetes/&#34;&gt;&lt;strong&gt;Red Hat OpenShift&lt;/strong&gt;&lt;/a&gt; or even on a local dev-box/laptop using &lt;a href=&#34;https://kubernetes.io/docs/setup/minikube/&#34;&gt;&lt;strong&gt;Minikube&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially, this post was about &lt;strong&gt;SQL Server 2019 Big Data Clusters&lt;/strong&gt; on Minikube, but after quite a few failed installation attempts I realised I did not have enough memory on my development box, so I decided to try it on &lt;strong&gt;Azure Kubernetes Service&lt;/strong&gt; (AKS) instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you want to run &lt;strong&gt;SQL Server 2019 Big Data Clusters&lt;/strong&gt; on Minikube it is suggested that your host machine (Minikube is essentially a VM) has at least 32Gb of memory, and you allocate at least 22Gb to the Minikube VM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I am a complete novice when it comes to Kubernetes, this post covers both how I set up AKS as well as the deployment of &lt;strong&gt;SQL Server 2019 Big Data Clusters&lt;/strong&gt; to AKS, and the post is somewhat a summary of the official &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/big-data-cluster/big-data-cluster-overview?view=sqlallproducts-allversions&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>