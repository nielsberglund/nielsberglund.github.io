<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql Server 2019 on Niels Berglund</title>
    <link>/categories/sql-server-2019/</link>
    <description>Recent content in Sql Server 2019 on Niels Berglund</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 26 Apr 2020 06:49:39 +0200</lastBuildDate>
    
	<atom:link href="/categories/sql-server-2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Lap Around SQL Server 2019 Big Data Cluster: Background &amp; Technology</title>
      <link>/2020/04/26/a-lap-around-sql-server-2019-big-data-cluster-background--technology/</link>
      <pubDate>Sun, 26 Apr 2020 06:49:39 +0200</pubDate>
      
      <guid>/2020/04/26/a-lap-around-sql-server-2019-big-data-cluster-background--technology/</guid>
      <description>&lt;p&gt;You who read my blog have probably noticed some posts around &lt;strong&gt;SQL Server 2019 Big Data Cluster&lt;/strong&gt;, (BDC). You have also most likely seen me posting about giving conference talks and webinars around BDC.&lt;/p&gt;

&lt;p&gt;One of the presentations I do around BDC is named &amp;ldquo;A Lap Around SQL Server 2019 Big Data Cluster&amp;rdquo;, and I thought it would be a good idea to make a blog post around the presentation. Well, as per usual for me, &amp;ldquo;a blog post&amp;rdquo; becomes multiple posts.&lt;/p&gt;

&lt;p&gt;So, in this post, we look at the background to &lt;strong&gt;SQL Server 2019 Big Data Cluster&lt;/strong&gt;, the technology behind it, and a little bit around monitoring the cluster. In future posts, we look at architecture, data virtualization and other interesting bits and pieces.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More PolyBase Issues in SQL Server 2019 Developers Edition</title>
      <link>/2019/12/30/more-polybase-issues-in-sql-server-2019-developers-edition/</link>
      <pubDate>Mon, 30 Dec 2019 18:26:55 +0200</pubDate>
      
      <guid>/2019/12/30/more-polybase-issues-in-sql-server-2019-developers-edition/</guid>
      <description>&lt;p&gt;A couple of weeks ago, I published the post &lt;a href=&#34;/2019/11/20/fix-polybase-in-sql-server-2019-developers-edition/&#34;&gt;&lt;strong&gt;Fix PolyBase in SQL Server 2019 Developers Edition&lt;/strong&gt;&lt;/a&gt;. In the post, I discussed how to fix an issue in SQL Server 2019 Developers edition, where the PolyBase services do not start up after installation.&lt;/p&gt;

&lt;p&gt;The fix in the post works fine, i.e. the services start after the fix. However some days after I published the post there was a question on a SQL Server 2019 forum, where the poster says he cannot create an external file format on the SQL Server 2019 Developer Edition. Sure enough, when I tried to do the same on my &amp;ldquo;fixed&amp;rdquo; instance, I could not either.&lt;/p&gt;

&lt;p&gt;So in this post, I look at how to fix that second issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Deploy SQL Server 2019 Big Data Cluster Using Azure Data Studio</title>
      <link>/2019/12/23/how-to-deploy-sql-server-2019-big-data-cluster-using-azure-data-studio/</link>
      <pubDate>Mon, 23 Dec 2019 19:35:36 +0200</pubDate>
      
      <guid>/2019/12/23/how-to-deploy-sql-server-2019-big-data-cluster-using-azure-data-studio/</guid>
      <description>&lt;p&gt;For you who follows my sporadic posts, you may wonder why I have yet another post, (YAP), covering how to deploy a &lt;strong&gt;SQL Server 2019 Big Data Cluster&lt;/strong&gt;, (BDC), using &lt;strong&gt;Azure Data Studio&lt;/strong&gt;, (ADS).&lt;/p&gt;

&lt;p&gt;The answer to that is that the version of BDC I deployed in &lt;a href=&#34;/2019/09/11/install-sql-server-2019-big-data-cluster-using-azure-data-studio/&#34;&gt;this&lt;/a&gt; post was a pre-release, and since then BDC has gone GA, (General Availability), and there are certain differences in deployment process between RC1, and RTM.&lt;/p&gt;

&lt;p&gt;So in this post let us look at how to deploy BDC RTM to Azure Kubernetes Service using ADS.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fix PolyBase in SQL Server 2019 Developers Edition</title>
      <link>/2019/11/20/fix-polybase-in-sql-server-2019-developers-edition/</link>
      <pubDate>Wed, 20 Nov 2019 05:52:17 +0200</pubDate>
      
      <guid>/2019/11/20/fix-polybase-in-sql-server-2019-developers-edition/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://www.microsoft.com/en-us/ignite&#34;&gt;MS Ignite&lt;/a&gt; in Orlando November 4 - 8, 2019, Microsoft announced the general availability of SQL Server 2019. At the same time, the SQL Server 2019 Developers Edition appeared as an MSDN download, and of course, I downloaded it and installed it on my dev box.&lt;/p&gt;

&lt;p&gt;After the installation, I noticed that PolyBase did not start up correctly, and I saw dump files all over the place. After some investigation, I figured out what the issue was, and this blog post describes the fix.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 &amp; Java: Parameters</title>
      <link>/2019/11/03/sql-server-2019--java-parameters/</link>
      <pubDate>Sun, 03 Nov 2019 11:07:23 +0200</pubDate>
      
      <guid>/2019/11/03/sql-server-2019--java-parameters/</guid>
      <description>&lt;p&gt;Microsoft introduced the ability to call Java code from SQL Server in around the SQL Server 2019 CTP 2.0 release, and I have written some posts posts about this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughout the CTP releases some functionality has changed, and in CTP 2.5 Microsoft introduced the Java Language Extension SDK. The Java code we write needs now to include the Java SDK and extend an abstract base from the SDK.&lt;/p&gt;

&lt;p&gt;With the introduction of the Java Language SDK, came some changes to how you handle method parameters, and I touched upon it briefly in the &lt;a href=&#34;/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/&#34;&gt;&lt;strong&gt;Java &amp;amp; SQL Server 2019 Extensibility Framework: The Sequel&lt;/strong&gt;&lt;/a&gt; post. In this post, I want to look more in detail at parameters and how to handle them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 &amp; Java Null Handling: Take Two</title>
      <link>/2019/10/26/sql-server-2019--java-null-handling-take-two/</link>
      <pubDate>Sat, 26 Oct 2019 05:32:54 +0200</pubDate>
      
      <guid>/2019/10/26/sql-server-2019--java-null-handling-take-two/</guid>
      <description>&lt;p&gt;You who read my blog know that during the last year, (or so), I have been writing about SQL Server 2019 and the ability to call into Java code from SQL Server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/s2k19_ext_framework_java&#34;&gt;&lt;strong&gt;SQL Server 2019 Extensibility Framework &amp;amp; Java&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It has been a fascinating &amp;ldquo;journey&amp;rdquo;, since SQL Server 2019 is still in preview, and there have been changes in how you call Java code along the way. In this post, we look at some relatively recent changes to how we handle null values in datasets.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Install SQL Server 2019 Big Data Cluster using Azure Data Studio</title>
      <link>/2019/09/11/install-sql-server-2019-big-data-cluster-using-azure-data-studio/</link>
      <pubDate>Wed, 11 Sep 2019 06:12:12 +0200</pubDate>
      
      <guid>/2019/09/11/install-sql-server-2019-big-data-cluster-using-azure-data-studio/</guid>
      <description>&lt;p&gt;I wrote a &lt;a href=&#34;/2018/11/10/sql-server-2019-big-data-cluster-on-azure-kubernetes-service/&#34;&gt;blog post&lt;/a&gt; back in November 2018, about how to install and deploy &lt;strong&gt;SQL Server 2019 Big Data Cluster&lt;/strong&gt; on Azure Kubernetes Service. Back then &lt;strong&gt;SQL Server 2019 Big Data Cluster&lt;/strong&gt; was in private preview, (CTP 2.1 I believe), and you had to sign up, to get access to the &amp;ldquo;bits&amp;rdquo;. Well, you did not really get any &amp;ldquo;bits&amp;rdquo;; what you did get was access to Python deployment scripts.&lt;/p&gt;

&lt;p&gt;Now, September 2019, the BDC is in public preview (you do not have to sign up), and it has reached Release Candidate (RC) status, RC 1. The install method has changed, or rather, in addition to installing via deployment scripts, you can now also install using &lt;strong&gt;Azure Data Studio&lt;/strong&gt; deployment notebooks, and that is what this blog post is about.&lt;/p&gt;

&lt;p&gt;I install it on Azure, and since I am in South Africa, I use one of the South African hosting locations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 CTP3.2 &amp; Java</title>
      <link>/2019/08/03/sql-server-2019-ctp3.2--java/</link>
      <pubDate>Sat, 03 Aug 2019 06:55:33 +0200</pubDate>
      
      <guid>/2019/08/03/sql-server-2019-ctp3.2--java/</guid>
      <description>&lt;p&gt;It seems that for each new SQL Server 2019 CTP release, there are changes to the Java extensions, and CTP 3.2 is no exception. Well, that is not exactly true as in CTP 3.2 release the changes are not about the extension and how we write code, but Java itself.&lt;/p&gt;

&lt;p&gt;One of the &lt;a href=&#34;https://cloudblogs.microsoft.com/sqlserver/2019/07/24/free-supported-java-in-sql-server-2019-is-now-available/&#34;&gt;announcements&lt;/a&gt; of what is new in CTP 3.2 was that SQL Server now includes &lt;a href=&#34;https://www.azul.com/&#34;&gt;Azul System&amp;rsquo;s&lt;/a&gt; Zulu Embedded right out of the box for all scenarios where we use Java in SQL Server, including Java extensibility.&lt;/p&gt;

&lt;p&gt;So, in this post, we look at the impact, (if any), this has to how we use the Java extensibility framework in SQL Server 2019.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Set Your SQL Server Data Free with Kafka: Extensibility Framework</title>
      <link>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</link>
      <pubDate>Tue, 16 Jul 2019 05:10:24 +0200</pubDate>
      
      <guid>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</guid>
      <description>&lt;p&gt;As many of you may know, (or not), is that my background is SQL Server. Ever since I started programming, SQL Server has been my &amp;ldquo;trusty companion&amp;rdquo;, and my belief is that if you don&amp;rsquo;t have SQL Server as a backend, then there is something wrong. At work, (&lt;a href=&#34;/derivco&#34;&gt;Derivco&lt;/a&gt;), it is the same thing, and we are jokingly saying that we do not have business logic in the database, we have full-blown applications!&lt;/p&gt;

&lt;p&gt;However, both me personally and at work, we do realise the value of streaming data; for real-time processing as well as to distribute data without having to rely on replication. In the ideal world, we would change the applications/systems that are the source of the data to both publish the data as event streams as well as persisting the data to the database. However, it may not be possible to change those applications/systems - at least not in the time frame we would like. So what we want to do is to use the database as the source of the data, but treat the data, not as rows in a database but, as streaming events.&lt;/p&gt;

&lt;p&gt;This is the first post in a &amp;ldquo;mini&amp;rdquo; series where we look at how we can do what is outlined above. In this post, we look at how to use the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt;, and more specifically the Java language extension to solve the issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server 2019 Extensibility Framework &amp; External Languages</title>
      <link>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</link>
      <pubDate>Thu, 06 Jun 2019 05:37:52 +0200</pubDate>
      
      <guid>/2019/06/06/sql-server-2019-extensibility-framework--external-languages/</guid>
      <description>&lt;p&gt;A little while ago I wrote a blog post, &lt;a href=&#34;/2019/05/26/java--sql-server-2019-extensibility-framework-the-sequel/&#34;&gt;&lt;strong&gt;Java &amp;amp; SQL Server 2019 Extensibility Framework: The Sequel&lt;/strong&gt;&lt;/a&gt;, about changes in SQL Server 2019 CTP 2.5 impacting how we write Java code for use from SQL Server. While I wrote that post, Microsoft released SQL Server 2019 CTP 3.0, and, (surprise, surprise), that release contains more changes affecting Java code in SQL Server.&lt;/p&gt;

&lt;p&gt;This post covers those changes as well as discusses what SQL Server Extensibility Framework and Language Extensions are.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>