<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on Niels Berglund</title>
    <link>/categories/kafka/</link>
    <description>Recent content in Kafka on Niels Berglund</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 07 Aug 2021 06:02:12 +0200</lastBuildDate>
    
	<atom:link href="/categories/kafka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Deploy the Debezium SQL Server Connector to Docker</title>
      <link>/2021/08/07/how-to-deploy-the-debezium-sql-server-connector-to-docker/</link>
      <pubDate>Sat, 07 Aug 2021 06:02:12 +0200</pubDate>
      
      <guid>/2021/08/07/how-to-deploy-the-debezium-sql-server-connector-to-docker/</guid>
      <description>&lt;p&gt;I have been doing a couple of conference talks lately (virtual, of course) about streaming data from SQL Server to Kafka. The title of the presentation is &lt;strong&gt;Free Your SQL Server Data With Kafka&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the presentation, I talk (and show) various ways of getting data from SQL Server to Kafka. One of the ways I cover is Microsoft CDC, together with Debezium.&lt;/p&gt;

&lt;p&gt;When I do the presentation, I always have a SQL Server installed locally, and I run Kafka in Docker. Without fail, every time I set up the environment, I cannot remember how to deploy the Debezium SQL Server Connector into Docker. Therefore I decided to write this post to have something to go back to for next time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Set Your SQL Server Data Free with Kafka: Extensibility Framework</title>
      <link>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</link>
      <pubDate>Tue, 16 Jul 2019 05:10:24 +0200</pubDate>
      
      <guid>/2019/07/16/set-your-sql-server-data-free-with-kafka-extensibility-framework/</guid>
      <description>&lt;p&gt;As many of you may know, (or not), is that my background is SQL Server. Ever since I started programming, SQL Server has been my &amp;ldquo;trusty companion&amp;rdquo;, and my belief is that if you don&amp;rsquo;t have SQL Server as a backend, then there is something wrong. At work, (&lt;a href=&#34;/derivco&#34;&gt;Derivco&lt;/a&gt;), it is the same thing, and we are jokingly saying that we do not have business logic in the database, we have full-blown applications!&lt;/p&gt;

&lt;p&gt;However, both me personally and at work, we do realise the value of streaming data; for real-time processing as well as to distribute data without having to rely on replication. In the ideal world, we would change the applications/systems that are the source of the data to both publish the data as event streams as well as persisting the data to the database. However, it may not be possible to change those applications/systems - at least not in the time frame we would like. So what we want to do is to use the database as the source of the data, but treat the data, not as rows in a database but, as streaming events.&lt;/p&gt;

&lt;p&gt;This is the first post in a &amp;ldquo;mini&amp;rdquo; series where we look at how we can do what is outlined above. In this post, we look at how to use the &lt;strong&gt;SQL Server Extensibility Framework&lt;/strong&gt;, and more specifically the Java language extension to solve the issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Confluent Platform &amp; Kafka for a .NET Developer on Windows</title>
      <link>/2019/06/18/confluent-platform--kafka-for-a-.net-developer-on-windows/</link>
      <pubDate>Tue, 18 Jun 2019 04:49:36 +0200</pubDate>
      
      <guid>/2019/06/18/confluent-platform--kafka-for-a-.net-developer-on-windows/</guid>
      <description>&lt;p&gt;As many of you know, I am an un-ashamed .NET developer on the Windows platform. Seeing that I do a lot of SQL Server development my development and OS platforms of choice is sufficient for my work, as I on my development box (Windows of course) install SQL Server Developer edition and whatever .NET framework I use.&lt;/p&gt;

&lt;p&gt;That has been sufficient up until now when I want to develop against Kafka. At &lt;a href=&#34;/derivco&#34;&gt;Derivco&lt;/a&gt; we are getting more and more interested in Kafka, and obviously, I want to install it so I can &lt;del&gt;play around&lt;/del&gt; investigate it. However, to install it on my development machine as I would typically do with technologies I am interested in, SQL Server, RabbitMQ, etc., is difficult, if not impossible.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Yes I know, there are articles on the web discussing how to run Kafka on Windows, but it is a hit and miss whether it works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A while ago I wrote a &lt;a href=&#34;/2018/07/10/install-confluent-platform-kafka-on-windows/&#34;&gt;post&lt;/a&gt; about how to run Kafka under &lt;strong&gt;Windows Subsystem for Linux&lt;/strong&gt; (WSL), and yes it works, but I have had issues with it, and to me, it is still a hack. So the options then (if we rule out WSL) are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running it on a Linux in a virtualized environment, (Virtual Box, VMWare, Hyper-V, etc.).&lt;/li&gt;
&lt;li&gt;Docker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of this post goes through how to set up the &lt;em&gt;Confluent Platform&lt;/em&gt; in a Docker environment and use it from .NET.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Install Confluent Platform (Kafka) on Windows</title>
      <link>/2018/07/10/install-confluent-platform-kafka-on-windows/</link>
      <pubDate>Tue, 10 Jul 2018 18:43:48 +0200</pubDate>
      
      <guid>/2018/07/10/install-confluent-platform-kafka-on-windows/</guid>
      <description>&lt;p&gt;You who follows my blog and have read my weekly roundups you know that I am quite (that is an understatement) interested in Apache Kafka and I am curious to find out what &amp;ldquo;cool&amp;rdquo; things one can do with it. For that, I want to be able to test &amp;ldquo;stuff&amp;rdquo; quickly. When I test and try out new things, I usually do it on my development box which contains everything I need: &lt;strong&gt;SQL Server&lt;/strong&gt;, &lt;strong&gt;RabbitMQ&lt;/strong&gt;, &lt;strong&gt;RStudio&lt;/strong&gt;, &lt;strong&gt;Microsoft Machine Learning Server&lt;/strong&gt;, &lt;strong&gt;Visual Studio&lt;/strong&gt; and the list goes on.&lt;/p&gt;

&lt;p&gt;So seeing that I have most of my &amp;ldquo;tools of the trade&amp;rdquo; on my machine I obviously also would like to have Kafka on the box. Herein lies a problem, I am a Windows dude and Kafka, and Windows do not gel. Yes, some people are running Kafka on Windows, but it is a chore. OK, so what to do? Sure, I could potentially run Kafka on a virtual machine, or in a Docker image, but it is not as transparent as I would like it to be (yeah, I am lazy).&lt;/p&gt;

&lt;p&gt;Hmm, Microsoft did introduce the ability to run Linux binary executables (in ELF format) natively on Windows 10 in Windows 10 version 1607. The feature is called &lt;strong&gt;Windows Subsystem for Linux&lt;/strong&gt; (WSL), and since I am now running version 1803, maybe I should try and install Kafka in &lt;em&gt;WSL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>