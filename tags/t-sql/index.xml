<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>T Sql on Niels Berglund</title>
    <link>/tags/t-sql/</link>
    <description>Recent content in T Sql on Niels Berglund</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 08 Jan 2017 11:41:55 +0200</lastBuildDate>
    
	<atom:link href="/tags/t-sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Abort, Abort, We Are XACT_ABORT:ing, Or Are We?!</title>
      <link>/2017/01/08/abort-abort-we-are-xact_aborting-or-are-we/</link>
      <pubDate>Sun, 08 Jan 2017 11:41:55 +0200</pubDate>
      
      <guid>/2017/01/08/abort-abort-we-are-xact_aborting-or-are-we/</guid>
      <description>&lt;p&gt;&lt;code&gt;SET XACT_ABORT&lt;/code&gt; defines whether a transaction is automatically rolled back when a T-SQL statement raises a run-time exception, and when you read posts from prominent SQL bloggers you quite often see that they recommend to always have &lt;code&gt;XACT_ABORT&lt;/code&gt; set to &lt;code&gt;ON&lt;/code&gt;. From the title of this post you may get the impression that I do not necessarily agree, and to an extent you may be right. So, let us see &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Server Error Handling Gotchas</title>
      <link>/2016/12/31/sql-server-error-handling-gotchas/</link>
      <pubDate>Sat, 31 Dec 2016 06:41:55 +0200</pubDate>
      
      <guid>/2016/12/31/sql-server-error-handling-gotchas/</guid>
      <description>&lt;p&gt;Way back when (in 2010 as a matter of fact), I wrote a couple of blog-posts (&lt;a href=&#34;/2010/11/10/new-t-sql-features-in-sql-11-/-denali---error-handling/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;/2010/11/12/more-t-sql-error-functionality-in-denali-/-sql-11/&#34;&gt;here&lt;/a&gt;) about error handling in the new CTP  releases of SQL Server Denali. Denali was what would become SQL Server 2012.&lt;/p&gt;

&lt;p&gt;The new functionality built upon what was introduced in SQL Server 2005 - the notion of structured exception handling through &lt;code&gt;BEGIN TRY END TRY&lt;/code&gt; followed by &lt;code&gt;BEGIN CATCH END CATCH&lt;/code&gt;. In those blog-posts I was fairly positive, and saw the new functionality as something useful and very well worth implementing. I am still positive, however since then I have used the new functionality introduced in SQL Server 2005 extensively in production and have come across some gotchas that I thought would be worth writing a blog-post about.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Transactions in SQL Server (take 2956)</title>
      <link>/2011/09/11/transactions-in-sql-server-take-2956/</link>
      <pubDate>Sun, 11 Sep 2011 09:27:56 +0200</pubDate>
      
      <guid>/2011/09/11/transactions-in-sql-server-take-2956/</guid>
      <description>&lt;p&gt;Transactions in SQL Server seems to be a difficult topic to grasp. This weekend I came across a blog-post where the poster showed a &amp;ldquo;solution&amp;rdquo; to the &amp;ldquo;The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION&amp;rdquo; error we sometimes see when various stored procedures call each other. The solution (even though it masked out the error in question) did not get it quite right. So I thought I would make a post about the subject.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More T-SQL Error Functionality in Denali / SQL 11</title>
      <link>/2010/11/12/more-t-sql-error-functionality-in-denali-/-sql-11/</link>
      <pubDate>Fri, 12 Nov 2010 09:27:56 +0200</pubDate>
      
      <guid>/2010/11/12/more-t-sql-error-functionality-in-denali-/-sql-11/</guid>
      <description>&lt;p&gt;In my previous &lt;a href=&#34;/2010/11/10/new-t-sql-features-in-sql-11-/-denali---error-handling/&#34;&gt;post&lt;/a&gt; I wrote about the new &lt;code&gt;THROW&lt;/code&gt; keyword in Denali / SQL 11. Having played around a bit more with Denali, I wanted to write some additional things about &lt;code&gt;THROW&lt;/code&gt; and it&amp;rsquo;s relation to &lt;code&gt;RAISERROR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>New T-SQL Features in SQL 11 / Denali - Error Handling</title>
      <link>/2010/11/10/new-t-sql-features-in-sql-11-/-denali---error-handling/</link>
      <pubDate>Wed, 10 Nov 2010 11:27:56 +0200</pubDate>
      
      <guid>/2010/11/10/new-t-sql-features-in-sql-11-/-denali---error-handling/</guid>
      <description>&lt;p&gt;A couple of days ago I wrote my &lt;a href=&#34;/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11/&#34;&gt;wish-list&lt;/a&gt; to Santa what I wanted to see in next version of SQL Server (SQL 11 / Denali). I was pleasantly surprised that I could find out for myself shortly after; i.e. SQL Server Denali CTP1 was released during the PASS Summit. I have literally finished installing the next version of SQL Server (Denali / SQL 11) on a new VM, like 10 minutes ago, and I have done a quick check of the new features of SQL Server Denali (what I could find at least) against my &lt;a href=&#34;/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11/&#34;&gt;wish-list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>