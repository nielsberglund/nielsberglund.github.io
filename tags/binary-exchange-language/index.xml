<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Exchange Language on Niels Berglund</title>
    <link>/tags/binary-exchange-language/</link>
    <description>Recent content in Binary Exchange Language on Niels Berglund</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 24 Dec 2017 08:02:00 +0200</lastBuildDate>
    
	<atom:link href="/tags/binary-exchange-language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Microsoft SQL Server R Services - Internals XVI</title>
      <link>/2017/12/24/microsoft-sql-server-r-services---internals-xvi/</link>
      <pubDate>Sun, 24 Dec 2017 08:02:00 +0200</pubDate>
      
      <guid>/2017/12/24/microsoft-sql-server-r-services---internals-xvi/</guid>
      <description>&lt;p&gt;This is the 17:th post in a series about &lt;strong&gt;Microsoft SQL Server R Services&lt;/strong&gt;, and the 16:th post that drills down into the internal of how it works. To see other posts (including this) in the series, go to &lt;a href=&#34;/sql_server_2k16_r_services&#34;&gt;&lt;strong&gt;SQL Server R Services&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the last few posts in this &lt;em&gt;Internals&lt;/em&gt; series we have looked at how data is being transported from SQL Server to the SqlSatellite. In this post we&amp;rsquo;ll look at how data is going the other way, from the SqlSatellite to SQL Server.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Microsoft SQL Server R Services - Internals XIV</title>
      <link>/2017/11/25/microsoft-sql-server-r-services---internals-xiv/</link>
      <pubDate>Sat, 25 Nov 2017 10:09:57 +0200</pubDate>
      
      <guid>/2017/11/25/microsoft-sql-server-r-services---internals-xiv/</guid>
      <description>&lt;p&gt;This is the 15:th post in a series about &lt;strong&gt;Microsoft SQL Server R Services&lt;/strong&gt;, and the 14:th post that drills down into the internal of how it works. To see other posts (including this) in the series, go to &lt;a href=&#34;/sql_server_2k16_r_services&#34;&gt;&lt;strong&gt;SQL Server R Services&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, after a couple of false starts this post will look into the protocol used when transferring data back and forth between SQL Server and the SqlSatellite: &lt;strong&gt;Binary eXchange Language&lt;/strong&gt; (&lt;strong&gt;BXL&lt;/strong&gt;). Why write about it at all? Well, the big reason why I wanted to know more about it, was due to the strange packet sizes I saw when inspecting data being sent from SQL Server to the SqlSatellite: one row with 5 numeric columns had a packet size of 6300 bytes!!!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>